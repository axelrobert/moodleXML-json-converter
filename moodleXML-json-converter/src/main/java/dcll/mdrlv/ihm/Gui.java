package dcll.mdrlv.ihm;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 * 
 * @author Emilien
 */
public class Gui extends javax.swing.JFrame {

	private Etat etat;
	private CustomFileFilter xmlFilter;
	private CustomFileFilter jsonFilter;
	private SelecteurDeFichier selct;
	private SelecteurDeDossier selctD;
	private Synchronizer sync;
	// Variables declaration - do not modify
	private javax.swing.ButtonGroup buttonGroupSensConverter;
	private javax.swing.JButton jButtonAnnuler;
	private javax.swing.JButton jButtonConvertir;
	private javax.swing.JButton jButtonFermer;
	private javax.swing.JButton jButtonParcourirIN;
	private javax.swing.JButton jButtonParcourirOut;
	private javax.swing.JButton jButtonReset;
	private javax.swing.JButton jButtonValider;
	private javax.swing.JLabel jLabelFichierIN;
	private javax.swing.JLabel jLabelFichierOut;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JRadioButton jRadioButtonJSONtoXML;
	private javax.swing.JRadioButton jRadioButtonXMLtoJSON;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTextArea jTextArea2;
	private javax.swing.JTextField jTextFieldPathIN;
	private javax.swing.JTextField jTextFieldPathOut;

	// End of variables declaration

	/** Creates new form ConverterGui */
	public Gui() {
		initComponents();
		this.setTitle("Converter XML et JSON");

		etat = Etat.INIT_XML_JSON;
		gestionEtat(etat);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		buttonGroupSensConverter = new javax.swing.ButtonGroup();
		jRadioButtonXMLtoJSON = new javax.swing.JRadioButton();
		jRadioButtonJSONtoXML = new javax.swing.JRadioButton();
		jPanel1 = new javax.swing.JPanel();
		jButtonParcourirIN = new javax.swing.JButton();
		jButtonValider = new javax.swing.JButton();
		jTextFieldPathIN = new javax.swing.JTextField();
		jButtonAnnuler = new javax.swing.JButton();
		jPanel2 = new javax.swing.JPanel();
		jButtonParcourirOut = new javax.swing.JButton();
		jTextFieldPathOut = new javax.swing.JTextField();
		jButtonConvertir = new javax.swing.JButton();
		jButtonReset = new javax.swing.JButton();
		jButtonFermer = new javax.swing.JButton();
		jLabelFichierIN = new javax.swing.JLabel();
		jLabelFichierOut = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea2 = new javax.swing.JTextArea();
		
		
		jTextArea1.setEditable(false);
		jTextArea2.setEditable(false);

		Synchronizer sync = new Synchronizer(jScrollPane1, jScrollPane2);
		jScrollPane1.getVerticalScrollBar().addAdjustmentListener(sync);
		jScrollPane1.getHorizontalScrollBar().addAdjustmentListener(sync);
		jScrollPane2.getVerticalScrollBar().addAdjustmentListener(sync);
		jScrollPane2.getHorizontalScrollBar().addAdjustmentListener(sync);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		// Filtre de fichiers
		xmlFilter = new CustomFileFilter("XML", new String[] { "xml", "html",
				"xhtml" });
		jsonFilter = new CustomFileFilter("JSON", "json");

		buttonGroupSensConverter.add(jRadioButtonXMLtoJSON);
		jRadioButtonXMLtoJSON.setSelected(true);
		jRadioButtonXMLtoJSON.setText("XML vers JSON");
		jRadioButtonXMLtoJSON
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jRadioButtonXMLtoJSONActionPerformed(evt);
					}
				});

		buttonGroupSensConverter.add(jRadioButtonJSONtoXML);
		jRadioButtonJSONtoXML.setText("JSON vers XML");
		jRadioButtonJSONtoXML
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jRadioButtonJSONtoXMLActionPerformed(evt);
					}
				});

		jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(
				0, 0, 0), 1, true));

		jButtonParcourirIN.setText("Parcourir");
		jButtonParcourirIN
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jButtonParcourirINActionPerformed(evt);
					}
				});

		jButtonValider.setText("Valider");
		jButtonValider.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonValiderActionPerformed(evt);
			}
		});

		jTextFieldPathIN.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jTextFieldPathINActionPerformed(evt);
			}
		});

		jButtonAnnuler.setText("Annuler");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				jTextFieldPathIN,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				269,
																				Short.MAX_VALUE))
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addGap(47,
																				47,
																				47)
																		.addComponent(
																				jButtonValider,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				75,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(31,
																				31,
																				31)
																		.addComponent(
																				jButtonAnnuler))
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addGap(106,
																				106,
																				106)
																		.addComponent(
																				jButtonParcourirIN)))
										.addContainerGap()));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap(16, Short.MAX_VALUE)
										.addComponent(jButtonParcourirIN)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jTextFieldPathIN,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jButtonValider)
														.addComponent(
																jButtonAnnuler))
										.addGap(5, 5, 5)));

		jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(
				0, 0, 0), 1, true));

		jButtonParcourirOut.setText("Parcourir");
		jButtonParcourirOut
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jButtonParcourirOutActionPerformed(evt);
					}
				});

		jTextFieldPathOut
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jTextFieldPathOutActionPerformed(evt);
					}
				});

		jButtonConvertir.setText("Convertir");
		jButtonConvertir.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonConvertirActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel2Layout
																		.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																		.addGroup(
																				jPanel2Layout
																						.createSequentialGroup()
																						.addComponent(
																								jTextFieldPathOut,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								252,
																								Short.MAX_VALUE)
																						.addContainerGap())
																		.addGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING,
																				jPanel2Layout
																						.createSequentialGroup()
																						.addComponent(
																								jButtonParcourirOut)
																						.addGap(92,
																								92,
																								92)))
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																jPanel2Layout
																		.createSequentialGroup()
																		.addComponent(
																				jButtonConvertir)
																		.addGap(90,
																				90,
																				90)))));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(jButtonParcourirOut)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(
												jTextFieldPathOut,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jButtonConvertir)
										.addGap(5, 5, 5)));

		jButtonReset.setText("Reset");
		jButtonReset.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonResetActionPerformed(evt);
			}
		});

		jButtonFermer.setText("Fermer");
		jButtonFermer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonFermerActionPerformed(evt);
			}
		});

		jLabelFichierIN.setText("Fichier XML");

		jLabelFichierOut.setText("Fichier JSON");

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		jTextArea2.setColumns(20);
		jTextArea2.setRows(5);
		jScrollPane2.setViewportView(jTextArea2);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jScrollPane1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		279,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		jScrollPane2,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		257,
																		Short.MAX_VALUE))
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(
																						layout.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																								.addComponent(
																										jPanel1,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										Short.MAX_VALUE)
																								.addGroup(
																										layout.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.LEADING)
																												.addComponent(
																														jRadioButtonXMLtoJSON,
																														javax.swing.GroupLayout.Alignment.TRAILING)
																												.addComponent(
																														jButtonReset,
																														javax.swing.GroupLayout.PREFERRED_SIZE,
																														72,
																														javax.swing.GroupLayout.PREFERRED_SIZE)))
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										jLabelFichierIN)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																								.addGroup(
																										layout.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.LEADING)
																												.addComponent(
																														jRadioButtonJSONtoXML)
																												.addComponent(
																														jPanel2,
																														javax.swing.GroupLayout.PREFERRED_SIZE,
																														javax.swing.GroupLayout.DEFAULT_SIZE,
																														javax.swing.GroupLayout.PREFERRED_SIZE)
																												.addComponent(
																														jLabelFichierOut)))
																				.addGroup(
																						layout.createSequentialGroup()
																								.addGap(20,
																										20,
																										20)
																								.addComponent(
																										jButtonFermer,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										78,
																										javax.swing.GroupLayout.PREFERRED_SIZE)))))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabelFichierOut)
												.addComponent(jLabelFichierIN))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane2,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														168, Short.MAX_VALUE)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														168, Short.MAX_VALUE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jPanel2,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														jPanel1,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														jRadioButtonJSONtoXML)
												.addComponent(
														jRadioButtonXMLtoJSON))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jButtonReset)
												.addComponent(jButtonFermer))
								.addContainerGap()));

		pack();
	}// </editor-fold>

	private void jButtonValiderActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling co
		switch (etat) {
		case INIT_JSON_XML:
			if (jTextFieldPathIN.getText().equals("")) {
				JOptionPane
						.showMessageDialog(this,
								"Veuillez renseigner un chemin pour le fichier à convertir");
			} else {
				etat = Etat.OUTPUT_JSON_XML;
				afficherTextArea(jTextArea1, jTextFieldPathIN.getText());
				afficherTextArea(jTextArea2, jTextFieldPathIN.getText());
				jTextFieldPathOut
						.setText(getDesktopEmplacementFile(jTextFieldPathIN
								.getText()));
			}
			break;
		case INIT_XML_JSON:
			if (jTextFieldPathIN.getText().equals("")) {
				JOptionPane
						.showMessageDialog(this,
								"Veuillez renseigner un chemin pour le fichier à convertir");
			} else {

				etat = Etat.OUTPUT_XML_JSON;
				afficherTextArea(jTextArea1, jTextFieldPathIN.getText());
				afficherTextArea(jTextArea2, jTextFieldPathIN.getText());
				jTextFieldPathOut
						.setText(getDesktopEmplacementFile(jTextFieldPathIN
								.getText()));
			}
			break;
		case OUTPUT_JSON_XML:
			throw new RuntimeException(
					"Bouton Valider : action interdite car Etat OUTPUT_JSON_XML");
		case OUTPUT_XML_JSON:
			throw new RuntimeException(
					"Bouton Valider : action interdite car Etat OUTPUT_XML_JSON");
		case VIEW_JSON_XML:
			throw new RuntimeException(
					"Bouton Valider : action interdite car Etat VIEW_JSON_XML");
		case VIEW_XML_JSON:
			throw new RuntimeException(
					"Bouton Valider : action interdite car Etat VIEW_XML_JSON");
		}
		gestionEtat(etat);
	}

	private void jTextFieldPathINActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jTextFieldPathOutActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jButtonConvertirActionPerformed(java.awt.event.ActionEvent evt) {
		switch (etat) {
		case INIT_JSON_XML:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat INIT_JSON_XML");
		case INIT_XML_JSON:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat INIT_XML_JSON");
		case OUTPUT_JSON_XML:

			if (jTextFieldPathOut.getText().equals("")) {
				JOptionPane
						.showMessageDialog(this,
								"Veuillez renseigner un chemin pour le fichier en sortie");
			} else {
				etat = Etat.VIEW_JSON_XML;
				afficherTextArea(jTextArea2, jTextFieldPathOut.getText());
			}
			break;
		case OUTPUT_XML_JSON:
			if (jTextFieldPathOut.getText().equals("")) {
				JOptionPane
						.showMessageDialog(this,
								"Veuillez renseigner un chemin pour le fichier en sortie");
			} else {
				etat = Etat.VIEW_XML_JSON;
				afficherTextArea(jTextArea2, jTextFieldPathOut.getText());
			}
			break;
		case VIEW_JSON_XML:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat VIEW_JSON_XML");
		case VIEW_XML_JSON:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat VIEW_XML_JSON");
		}
		gestionEtat(etat);
	}

	private void jRadioButtonXMLtoJSONActionPerformed(
			java.awt.event.ActionEvent evt) {
		switch (etat) {
		case INIT_JSON_XML:
			etat = Etat.INIT_XML_JSON;
			break;
		case INIT_XML_JSON:
			etat = Etat.INIT_XML_JSON;
			break;
		case OUTPUT_JSON_XML:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat OUTPUT_JSON_XML");
		case OUTPUT_XML_JSON:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat OUTPUT_XML_JSON");
		case VIEW_JSON_XML:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat VIEW_JSON_XML");
		case VIEW_XML_JSON:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat VIEW_XML_JSON");
		}
		gestionEtat(etat);
	}

	private void jRadioButtonJSONtoXMLActionPerformed(
			java.awt.event.ActionEvent evt) {
		switch (etat) {
		case INIT_JSON_XML:
			etat = Etat.INIT_JSON_XML;
			break;
		case INIT_XML_JSON:
			etat = Etat.INIT_JSON_XML;
			break;
		case OUTPUT_JSON_XML:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat OUTPUT_JSON_XML");
		case OUTPUT_XML_JSON:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat OUTPUT_XML_JSON");
		case VIEW_JSON_XML:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat VIEW_JSON_XML");
		case VIEW_XML_JSON:
			throw new RuntimeException(
					"Bouton Convertir : action interdite car Etat VIEW_XML_JSON");
		}
		gestionEtat(etat);
	}

	private void jButtonParcourirINActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		switch (etat) {
		case INIT_JSON_XML:
			selct = new SelecteurDeFichier(jsonFilter, this);
			selct.setSize(300, 300);
			selct.setVisible(true);
			jTextFieldPathIN.setEditable(false);
			break;
		case INIT_XML_JSON:
			selct = new SelecteurDeFichier(xmlFilter, this);
			selct.setSize(300, 300);
			selct.setVisible(true);
			jTextFieldPathIN.setEditable(false);
			break;
		case OUTPUT_JSON_XML:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat OUTPUT_JSON_XML");
		case OUTPUT_XML_JSON:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat OUTPUT_XML_JSON");
		case VIEW_JSON_XML:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat VIEW_JSON_XML");
		case VIEW_XML_JSON:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat VIEW_XML_JSON");
		}

	}

	private void jButtonParcourirOutActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		switch (etat) {
		case INIT_JSON_XML:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat INIT_JSON_XML");
		case INIT_XML_JSON:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat INIT_XML_JSON");
		case OUTPUT_JSON_XML:
			selctD = new SelecteurDeDossier(this);
			selctD.setSize(300, 300);
			selctD.setVisible(true);
			jTextFieldPathIN.setEditable(false);
			break;
		case OUTPUT_XML_JSON:
			selctD = new SelecteurDeDossier(this);
			selctD.setSize(300, 300);
			selctD.setVisible(true);
			jTextFieldPathIN.setEditable(false);
			break;
			
		case VIEW_JSON_XML:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat VIEW_JSON_XML");
		case VIEW_XML_JSON:
			throw new RuntimeException(
					"Bouton Parcourir : action interdite car Etat VIEW_XML_JSON");
		}

	}

	private void jButtonFermerActionPerformed(java.awt.event.ActionEvent evt) {
		int response = JOptionPane.showConfirmDialog(null,
				"Do you want to quit?", "Confirm", JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		if (response == JOptionPane.YES_OPTION) {
			System.exit(0);
		}
	}

	private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {
		int response = JOptionPane.showConfirmDialog(null,
				"Do you want to reset?", "Confirm", JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		if (response == JOptionPane.YES_OPTION) {
			switch (etat) {
			case INIT_JSON_XML:
			case INIT_XML_JSON:
			case OUTPUT_JSON_XML:
			case OUTPUT_XML_JSON:
			case VIEW_JSON_XML:
			case VIEW_XML_JSON:
				etat = Etat.INIT_XML_JSON;
				break;
			}
		}
		gestionEtat(etat);
	}

	public void setPathIN(String s) {
		jTextFieldPathIN.setText(s);
	}

	public void setPathOut(String s) {
		
		String fichier = jTextFieldPathIN.getText().substring(jTextFieldPathIN.getText().lastIndexOf("\\"));
		jTextFieldPathOut.setText(s.concat(fichier));
	}

	public JTextField getPathIN() {
		return jTextFieldPathIN;
	}

	public JTextField getPathOut(String s) {
		return jTextFieldPathOut;
	}

	public void afficherTextArea(JTextArea txt, String file) {

		FileReader flux = null;
		BufferedReader input = null;
		String str;
		try {
			flux = new FileReader(file);

			input = new BufferedReader(flux);

			while ((str = input.readLine()) != null) {
				txt.append(str + '\n');
			}
		} catch (IOException e) {
			System.out.println("Impossible d'ouvrir le fichier : "
					+ e.toString());
		} finally {
			try {
				flux.close();
			} catch (IOException ex) {
				System.out.println("Impossible d'ouvrir le fichier : "
						+ ex.toString());
			}

			txt.setCaretPosition(0);
		}

	}

	public String getDesktopEmplacementFile(String pathO) {

		String desktop = "C:\\Users\\Emilien\\Desktop";
		String fichier = pathO.substring(pathO.lastIndexOf("\\"));
		return desktop.concat(fichier);
	}

	public void gestionEtat(Etat e) {

		switch (e) {
		case INIT_JSON_XML:
			jTextArea1.setText("");
			jTextArea2.setText("");
			
			jButtonParcourirIN.setEnabled(true);
			jButtonValider.setEnabled(true);
			jTextFieldPathIN.setEnabled(true);
			jTextFieldPathIN.setText("");
			jTextFieldPathIN.setEditable(true);
			jButtonAnnuler.setEnabled(false);

			jButtonParcourirOut.setEnabled(false);
			jTextFieldPathOut.setEnabled(false);
			jTextFieldPathOut.setEditable(false);
			jButtonConvertir.setEnabled(false);
			jButtonReset.setEnabled(true);
			jButtonFermer.setEnabled(true);

			jRadioButtonJSONtoXML.setEnabled(true);
			jRadioButtonXMLtoJSON.setEnabled(true);
			jRadioButtonJSONtoXML.setSelected(true);
			jRadioButtonXMLtoJSON.setSelected(false);

			jLabelFichierIN.setText("Fichier JSON");
			jLabelFichierOut.setText("Fichier XML");

			break;
		case INIT_XML_JSON:
			jTextArea1.setText("");
			jTextArea2.setText("");
			
			jButtonParcourirIN.setEnabled(true);
			jButtonValider.setEnabled(true);
			jTextFieldPathIN.setEnabled(true);
			jTextFieldPathIN.setText("");
			jTextFieldPathIN.setEditable(true);
			jButtonAnnuler.setEnabled(false);

			jButtonParcourirOut.setEnabled(false);
			jTextFieldPathOut.setEnabled(false);
			jTextFieldPathOut.setEditable(false);
			jButtonConvertir.setEnabled(false);
			jButtonReset.setEnabled(true);
			jButtonFermer.setEnabled(true);

			jRadioButtonJSONtoXML.setEnabled(true);
			jRadioButtonXMLtoJSON.setEnabled(true);
			jRadioButtonJSONtoXML.setSelected(false);
			jRadioButtonXMLtoJSON.setSelected(true);

			jLabelFichierIN.setText("Fichier XML");
			jLabelFichierOut.setText("Fichier JSON");

			break;
		case OUTPUT_JSON_XML:
			jButtonParcourirIN.setEnabled(false);
			jButtonValider.setEnabled(false);
			jTextFieldPathIN.setEnabled(false);
			jTextFieldPathIN.setEditable(false);
			jButtonAnnuler.setEnabled(true);

			jButtonParcourirOut.setEnabled(true);
			jTextFieldPathOut.setEnabled(true);
			jTextFieldPathOut.setEditable(true);
			jButtonConvertir.setEnabled(true);
			jButtonReset.setEnabled(true);
			jButtonFermer.setEnabled(true);

			jRadioButtonJSONtoXML.setEnabled(false);
			jRadioButtonXMLtoJSON.setEnabled(false);

			break;
		case OUTPUT_XML_JSON:
			jButtonParcourirIN.setEnabled(false);
			jButtonValider.setEnabled(false);
			jTextFieldPathIN.setEnabled(false);
			jTextFieldPathIN.setEditable(false);
			jButtonAnnuler.setEnabled(true);

			jButtonParcourirOut.setEnabled(true);
			jTextFieldPathOut.setEnabled(true);
			jTextFieldPathOut.setEditable(true);
			jButtonConvertir.setEnabled(true);
			jButtonReset.setEnabled(true);
			jButtonFermer.setEnabled(true);

			jRadioButtonJSONtoXML.setEnabled(false);
			jRadioButtonXMLtoJSON.setEnabled(false);
			break;
		case VIEW_JSON_XML:
			jButtonParcourirIN.setEnabled(false);
			jButtonValider.setEnabled(false);
			jTextFieldPathIN.setEnabled(false);
			jTextFieldPathIN.setEditable(false);
			jButtonAnnuler.setEnabled(false);

			jButtonParcourirOut.setEnabled(false);
			jTextFieldPathOut.setEnabled(false);
			jTextFieldPathOut.setEditable(false);
			jButtonConvertir.setEnabled(false);
			jButtonReset.setEnabled(true);
			jButtonFermer.setEnabled(true);

			jRadioButtonJSONtoXML.setEnabled(false);
			jRadioButtonXMLtoJSON.setEnabled(false);
			break;
		case VIEW_XML_JSON:
			jButtonParcourirIN.setEnabled(false);
			jButtonValider.setEnabled(false);
			jTextFieldPathIN.setEnabled(false);
			jTextFieldPathIN.setEditable(false);
			jButtonAnnuler.setEnabled(false);

			jButtonParcourirOut.setEnabled(false);
			jTextFieldPathOut.setEnabled(false);
			jTextFieldPathOut.setEditable(false);
			jButtonConvertir.setEnabled(false);
			jButtonReset.setEnabled(true);
			jButtonFermer.setEnabled(true);

			jRadioButtonJSONtoXML.setEnabled(false);
			jRadioButtonXMLtoJSON.setEnabled(false);
			break;
		}

	}

}
